package dev.todoforever.foodscannerbot.bot.handlers;

import dev.todoforever.foodscannerbot.bot.MessageSender;
import dev.todoforever.foodscannerbot.food.EanDbClient;
import dev.todoforever.foodscannerbot.food.ProductInfo;
import dev.todoforever.foodscannerbot.utils.BarCodeReader;
import dev.todoforever.foodscannerbot.utils.EnvUtil;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.photo.PhotoSize;

import java.io.File;
import java.util.Comparator;
import java.util.List;

@Service
public class MessageHandler {

    private final OkHttpTelegramClient client;
    private final MessageSender sender;
    private final EanDbClient eanDb;

    public MessageHandler(OkHttpTelegramClient client, MessageSender sender) {
        this.client = client;
        this.sender = sender;
        this.eanDb = new EanDbClient(EnvUtil.getOrDefault("EANDB_TOKEN", ""));
    }

    public void handle(Update update) {
        if (update.getMessage() == null) return;
        var msg = update.getMessage();
        String chatId = msg.getChatId().toString();

        List<PhotoSize> photos = msg.getPhoto();
        if (photos != null && !photos.isEmpty()) {
            var largest = photos.stream()
                    .max(Comparator.comparing(PhotoSize::getFileSize, Comparator.nullsFirst(Integer::compareTo)))
                    .orElse(null);
            try {
                var tgFile = client.execute(new GetFile(largest.getFileId()));
                File downloaded = client.downloadFile(tgFile);
                String code = BarCodeReader.read(downloaded.getAbsolutePath());
                if (code == null) {
                    sender.send(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥.");
                    return;
                }

                var infoOpt = eanDb.byBarcode(code);
                if (infoOpt.isEmpty()) {
                    sender.send(chatId, "üì¶ –®—Ç—Ä–∏—Ö–∫–æ–¥: " + code + "\n–î–∞–Ω—ñ –ø—Ä–æ —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
                    return;
                }

                ProductInfo p = infoOpt.get();
                StringBuilder sb = new StringBuilder();
                if (p.name() != null) sb.append("üõçÔ∏è ").append(p.name()).append('\n');
                sb.append("üì¶ –®—Ç—Ä–∏—Ö–∫–æ–¥: ").append(code).append('\n');
                if (p.grams() != null) sb.append("‚öñÔ∏è –í–∞–≥–∞: ").append(p.grams()).append(" –≥\n");
                sb.append("üçΩÔ∏è –ù–∞ 100 –≥:\n")
                        .append(" ‚Ä¢ –ö–∫–∞–ª: ").append(fmt(p.kcal100g())).append('\n')
                        .append(" ‚Ä¢ –ë—ñ–ª–∫–∏: ").append(fmt(p.protein100g())).append(" –≥\n")
                        .append(" ‚Ä¢ –ñ–∏—Ä–∏: ").append(fmt(p.fat100g())).append(" –≥\n")
                        .append(" ‚Ä¢ –í—É–≥–ª–µ–≤–æ–¥–∏: ").append(fmt(p.carbs100g())).append(" –≥");
                sender.send(chatId, sb.toString());
                return;
            } catch (Exception e) {
                sender.send(chatId, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ: " + e.getMessage());
                return;
            }
        }

        String text = msg.getText();
        if (text != null && text.startsWith("/start")) {
            sender.send(chatId, "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∑—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º –ø—Ä–æ–¥—É–∫—Ç–∞ üì∑");
        }
    }

    private static String fmt(Double d) {
        return d == null ? "‚Äî" :
                (d % 1 == 0 ? String.valueOf(d.intValue()) : String.format("%.1f", d));
    }
}
